To make the email verification work on localhost, I'll provide you with two solutions:

Using MailHog (for local testing without sending real emails).

Using PHPMailer with Gmail SMTP (for sending real emails, requires an internet connection).

Solution 1: Using MailHog (Local Testing)
Step 1: Install and Run MailHog
Download MailHog from MailHog GitHub.

Run MailHog:

On Windows: Double-click the downloaded executable.

On macOS/Linux: Run ./MailHog in the terminal.

MailHog will start an SMTP server on localhost:1025 and a web interface on http://localhost:8025.

Step 2: Update PHP Configuration
Update your PHP script to use MailHog's SMTP server:

php
Copy
ini_set('SMTP', 'localhost');
ini_set('smtp_port', 1025);
Step 3: Update login.php to Use MailHog
Here‚Äôs the updated login.php code:

php
Copy
<?php
session_start();

// Check for any success or error messages
if (isset($_SESSION['success_message'])) {
    $success = $_SESSION['success_message'];
    unset($_SESSION['success_message']);
}

if (isset($_SESSION['error_message'])) {
    $error = $_SESSION['error_message'];
    unset($_SESSION['error_message']);
}

if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    // Check if the verification code is being submitted
    if (isset($_POST['verification_code'])) {
        $verificationCode = $_POST['verification_code'];

        // Verify the code
        if (isset($_SESSION['verification_code']) && $verificationCode == $_SESSION['verification_code']) {
            // Code is correct, log the user in
            $_SESSION['user_id'] = $_SESSION['temp_user_id'];
            unset($_SESSION['temp_user_id']);
            unset($_SESSION['verification_code']);

            $_SESSION['success_message'] = "Login successful!";
            header('Location: dashboard.php');
            exit;
        } else {
            // Code is incorrect
            $_SESSION['error_message'] = "Invalid verification code.";
            header('Location: login.php');
            exit;
        }
    } else {
        // Get the input data
        $email = $_POST['email'];
        $password = $_POST['password'];

        // Fetch the user from the database based on email
        require 'db.php';
        $stmt = $pdo->prepare('SELECT * FROM users WHERE email = ?');
        $stmt->execute([$email]);
        $user = $stmt->fetch();

        if ($user) {
            // Check if the account is locked due to too many failed attempts
            $failedAttempts = $user['failed_attempts'];
            $lockTime = $user['lock_time'];
            $currentTime = new DateTime();

            if ($lockTime && $currentTime < new DateTime($lockTime)) {
                $_SESSION['error_message'] = "Your account is locked. Try again later.";
                header('Location: login.php');
                exit;
            }

            // Verify the password
            if (password_verify($password, $user['password'])) {
                // Generate a random verification code
                $verificationCode = rand(100000, 999999);

                // Store the verification code and temporary user ID in the session
                $_SESSION['verification_code'] = $verificationCode;
                $_SESSION['temp_user_id'] = $user['id'];

                // Send the verification code to the user's email
                $to = $email;
                $subject = "Your Login Verification Code";
                $message = "Your verification code is: $verificationCode";
                $headers = "From: no-reply@example.com";

                // Use MailHog to send the email
                ini_set('SMTP', 'localhost');
                ini_set('smtp_port', 1025);

                if (mail($to, $subject, $message, $headers)) {
                    $_SESSION['success_message'] = "A verification code has been sent to your email.";
                } else {
                    $_SESSION['error_message'] = "Failed to send verification code. Please try again.";
                }

                header('Location: login.php');
                exit;
            } else {
                // Password is incorrect
                $failedAttempts++;

                // Lock the account after 3 failed attempts
                if ($failedAttempts >= 3) {
                    $lockTime = $currentTime->add(new DateInterval('PT5M'))->format('Y-m-d H:i:s');
                    $stmt = $pdo->prepare('UPDATE users SET failed_attempts = ?, lock_time = ? WHERE id = ?');
                    $stmt->execute([$failedAttempts, $lockTime, $user['id']]);

                    $_SESSION['error_message'] = "Too many failed attempts. Your account is locked for 3 minutes.";
                } else {
                    // Update failed attempts
                    $stmt = $pdo->prepare('UPDATE users SET failed_attempts = ? WHERE id = ?');
                    $stmt->execute([$failedAttempts, $user['id']]);

                    $_SESSION['error_message'] = "Invalid email or password.";
                }

                header('Location: login.php');
                exit;
            }
        } else {
            // User not found
            $_SESSION['error_message'] = "Invalid email or password.";
            header('Location: login.php');
            exit;
        }
    }
}
?>

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login</title>
    <style>
        /* Add your CSS styles here */
    </style>
</head>

<body>
    <h1>Login</h1>

    <?php if (isset($error) && $error): ?>
        <p class="error"><?php echo $error; ?></p>
    <?php endif; ?>

    <?php if (isset($success) && $success): ?>
        <p class="success"><?php echo $success; ?></p>
    <?php endif; ?>

    <?php if (isset($_SESSION['verification_code'])): ?>
        <!-- Show verification code input if a code has been sent -->
        <form method="post">
            <input type="text" name="verification_code" placeholder="Enter Verification Code" required>
            <button type="submit">Verify</button>
        </form>
    <?php else: ?>
        <!-- Show login form if no verification code has been sent -->
        <form method="post">
            <input type="text" name="email" placeholder="Email" required>
            <div class="password-toggle">
                <input type="password" name="password" id="password" placeholder="Password" required>
                <span class="toggle-btn" onclick="togglePassword()">üëÅÔ∏è</span>
            </div>
            <button type="submit">Login</button>
        </form>
    <?php endif; ?>

    <p>Don't have an account? <a href="register.php">Register here</a>.</p>

    <script>
        function togglePassword() {
            const passwordInput = document.getElementById('password');
            const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';
            passwordInput.setAttribute('type', type);
        }
    </script>
</body>

</html>
Solution 2: Using PHPMailer with Gmail SMTP (Real Emails)
Step 1: Install PHPMailer
Install PHPMailer via Composer:

bash
Copy
composer require phpmailer/phpmailer
Step 2: Update login.php to Use PHPMailer
Here‚Äôs the updated login.php code:

php
Copy
<?php
session_start();

// Check for any success or error messages
if (isset($_SESSION['success_message'])) {
    $success = $_SESSION['success_message'];
    unset($_SESSION['success_message']);
}

if (isset($_SESSION['error_message'])) {
    $error = $_SESSION['error_message'];
    unset($_SESSION['error_message']);
}

if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    // Check if the verification code is being submitted
    if (isset($_POST['verification_code'])) {
        $verificationCode = $_POST['verification_code'];

        // Verify the code
        if (isset($_SESSION['verification_code']) && $verificationCode == $_SESSION['verification_code']) {
            // Code is correct, log the user in
            $_SESSION['user_id'] = $_SESSION['temp_user_id'];
            unset($_SESSION['temp_user_id']);
            unset($_SESSION['verification_code']);

            $_SESSION['success_message'] = "Login successful!";
            header('Location: dashboard.php');
            exit;
        } else {
            // Code is incorrect
            $_SESSION['error_message'] = "Invalid verification code.";
            header('Location: login.php');
            exit;
        }
    } else {
        // Get the input data
        $email = $_POST['email'];
        $password = $_POST['password'];

        // Fetch the user from the database based on email
        require 'db.php';
        $stmt = $pdo->prepare('SELECT * FROM users WHERE email = ?');
        $stmt->execute([$email]);
        $user = $stmt->fetch();

        if ($user) {
            // Check if the account is locked due to too many failed attempts
            $failedAttempts = $user['failed_attempts'];
            $lockTime = $user['lock_time'];
            $currentTime = new DateTime();

            if ($lockTime && $currentTime < new DateTime($lockTime)) {
                $_SESSION['error_message'] = "Your account is locked. Try again later.";
                header('Location: login.php');
                exit;
            }

            // Verify the password
            if (password_verify($password, $user['password'])) {
                // Generate a random verification code
                $verificationCode = rand(100000, 999999);

                // Store the verification code and temporary user ID in the session
                $_SESSION['verification_code'] = $verificationCode;
                $_SESSION['temp_user_id'] = $user['id'];

                // Send the verification code to the user's email using PHPMailer
                require 'vendor/autoload.php'; // Include PHPMailer

                $mail = new PHPMailer\PHPMailer\PHPMailer();
                $mail->isSMTP();
                $mail->Host = 'smtp.gmail.com';
                $mail->SMTPAuth = true;
                $mail->Username = 'your-email@gmail.com'; // Your Gmail address
                $mail->Password = 'your-app-password'; // Your Gmail app password
                $mail->SMTPSecure = 'tls';
                $mail->Port = 587;

                $mail->setFrom('no-reply@example.com', 'Your App');
                $mail->addAddress($email); // User's email
                $mail->Subject = 'Your Login Verification Code';
                $mail->Body = "Your verification code is: $verificationCode";

                if ($mail->send()) {
                    $_SESSION['success_message'] = "A verification code has been sent to your email.";
                } else {
                    $_SESSION['error_message'] = "Failed to send verification code. Please try again.";
                }

                header('Location: login.php');
                exit;
            } else {
                // Password is incorrect
                $failedAttempts++;

                // Lock the account after 3 failed attempts
                if ($failedAttempts >= 3) {
                    $lockTime = $currentTime->add(new DateInterval('PT5M'))->format('Y-m-d H:i:s');
                    $stmt = $pdo->prepare('UPDATE users SET failed_attempts = ?, lock_time = ? WHERE id = ?');
                    $stmt->execute([$failedAttempts, $lockTime, $user['id']]);

                    $_SESSION['error_message'] = "Too many failed attempts. Your account is locked for 3 minutes.";
                } else {
                    // Update failed attempts
                    $stmt = $pdo->prepare('UPDATE users SET failed_attempts = ? WHERE id = ?');
                    $stmt->execute([$failedAttempts, $user['id']]);

                    $_SESSION['error_message'] = "Invalid email or password.";
                }

                header('Location: login.php');
                exit;
            }
        } else {
            // User not found
            $_SESSION['error_message'] = "Invalid email or password.";
            header('Location: login.php');
            exit;
        }
    }
}
?>

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login</title>
    <style>
        /* Add your CSS styles here */
    </style>
</head>

<body>
    <h1>Login</h1>

    <?php if (isset($error) && $error): ?>
        <p class="error"><?php echo $error; ?></p>
    <?php endif; ?>

    <?php if (isset($success) && $success): ?>
        <p class="success"><?php echo $success; ?></p>
    <?php endif; ?>

    <?php if (isset($_SESSION['verification_code'])): ?>
        <!-- Show verification code input if a code has been sent -->
        <form method="post">
            <input type="text" name="verification_code" placeholder="Enter Verification Code" required>
            <button type="submit">Verify</button>
        </form>
    <?php else: ?>
        <!-- Show login form if no verification code has been sent -->
        <form method="post">
            <input type="text" name="email" placeholder="Email" required>
            <div class="password-toggle">
                <input type="password" name="password" id="password" placeholder="Password" required>
                <span class="toggle-btn" onclick="togglePassword()">üëÅÔ∏è</span>
            </div>
            <button type="submit">Login</button>
        </form>
    <?php endif; ?>

    <p>Don't have an account? <a href="register.php">Register here</a>.</p>

    <script>
        function togglePassword() {
            const passwordInput = document.getElementById('password');
            const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';
            passwordInput.setAttribute('type', type);
        }
    </script>
</body>

</html>
Key Notes:
MailHog: Use this for local testing. Emails will appear in the MailHog web interface (http://localhost:8025).

PHPMailer with Gmail: Use this for sending real emails. Requires an internet connection and a Gmail account.

Let me know if you need further assistance!